import logging
import asyncio
import typing
from datetime import datetime
import pandas as pd

from data_services.vendors.vendor import MarketDataVendor, VALID_VENDORS
from data_services.utils.universe import Universe
from data_services.utils.log import logging_dict
from data_services.utils.data_process_utils import (
    TimeSeriesDataQuery,
    preprocess_df,
    remove_duplicates,
)

import data_services.utils.paths as output_paths

# Initialize logger
logging.config.dictConfig(logging_dict)
_logger = logging.getLogger(__name__)


def build_ohlcv_query(
    universe: Universe | typing.Tuple,
    start: type[datetime],
    end: type[datetime],
    exchange: str = "US",
):
    """
    Build query for fetching ohlcv data

    """
    if isinstance(universe, typing.Tuple):
        _logger.info("Loading custom universe parameters....")
        universe_name = universe[0]
        symbols = universe[1]
    else:
        _logger.info("Loading universe parameters....")
        universe_name = universe.value[0]
        symbols = universe.value[2]

    return universe_name, TimeSeriesDataQuery(start, end, exchange, symbols)


async def get_data(
    vendor: type[MarketDataVendor],
    universe: Universe | typing.Tuple,
    start: type[datetime],
    end: type[datetime],
    exchange: str = "US",
    do_archive: bool = False,
) -> typing.Coroutine[any, any, any]:
    """
    Returns a list of historical Open-High-Low-Close-Volume (OHLCV) data
    for a defined universe, as specified in the global universe
    configuration file.

    """

    if vendor.__name__ not in VALID_VENDORS:
        _logger.error("Invalid vendor provided!")
        raise ValueError("Vendor provided is not valid or implemented!")

    provider = vendor()
    universe_name, query = build_ohlcv_query(universe, start=start, end=end, exchange=exchange)

    _logger.info(f"Now fetching Ohlcv data for {universe_name}...")
    universe_filepath = f"{output_paths.OUTPUT_ETF_OHLCV}/{universe_name}.h5"
    _logger.info(f"Vendor: {provider.__class__.__name__}")
    if not hasattr(provider, "fetch_multi_symbols_data"):
        raise NotImplementedError(
            "'fetchMultiSymbols' method has not been implemented for this vendor..."
        )

    data = await provider.fetch_multi_symbols_data(query=query)

    if do_archive:
        symbols = query.symbols
        with pd.HDFStore(universe_filepath, mode="a") as store:
            for symbol, symbol_data in zip(symbols, data):
                df = preprocess_df(pd.DataFrame(symbol_data))
                if f"/{symbol}" in store.keys():
                    # Handle duplicates rows for existing symbol
                    remove_duplicates(store[symbol], df)
                store.append(symbol, df)

    return universe_name, data


def get_last_data(
    vendor: type[MarketDataVendor],
    universe: Universe | typing.Tuple,
    exchange: str = "US",
    do_archive: bool = False,
):
    """
    Returns last day Open-High-Low-Close-Volume (OHLCV) data
    for a defined universe, as specified in the global universe
    configuration file.

    """
    start = end = datetime.now()
    return asyncio.run(get_data(vendor, universe, start, end, exchange, do_archive))


if __name__ == "__main__":

    # ALL_ETF = ["GPC", "GILD", "GL", "GPN", "GS"]
    ALL_ETF = [
        "GPC",
        "GILD",
        "GL",
        "GPN",
        "GS",
        "HAL",
        "HIG",
        "HAS",
        "HCA",
        "PEAK",
        "HSIC",
        "HSY",
        "HES",
        "HPE",
        "HLT",
        "HOLX",
        "HD",
        "HON",
        "HRL",
        "HST",
        "HWM",
        "HPQ",
        "HUBB",
        "HUM",
        "HBAN",
        "HII",
        "IBM",
        "IEX",
        "IDXX",
        "ITW",
        "ILMN",
        "INCY",
        "IR",
        "PODD",
        "INTC",
        "ICE",
        "IFF",
        "IP",
        "IPG",
        "INTU",
        "ISRG",
        "IVZ",
        "INVH",
        "IQV",
        "IRM",
        "JBHT",
        "JKHY",
        "J",
        "JNJ",
        "JCI",
        "JPM",
        "JNPR",
        "K",
        "MMM",
        "AOS",
        "ABT",
        "ABBV",
        "ACN",
        "ADM",
        "ADBE",
        "ADP",
        "AES",
        "AFL",
        "A",
        "ABNB",
        "APD",
        "AKAM",
        "ALK",
        "ALB",
        "ARE",
        "ALGN",
        "ALLE",
        "LNT",
        "ALL",
        "GOOGL",
        "GOOG",
        "MO",
        "AMZN",
        "AMCR",
        "AMD",
        "AEE",
        "AAL",
        "AEP",
        "AXP",
        "AIG",
        "AMT",
        "AWK",
        "AMP",
        "AME",
        "AMGN",
        "APH",
        "ADI",
        "ANSS",
        "AON",
        "APA",
        "AAPL",
        "AMAT",
        "APTV",
        "ACGL",
        "ANET",
        "AJG",
        "AIZ",
        "T",
        "ATO",
        "ADSK",
        "AZO",
        "AVB",
        "AVY",
        "AXON",
        "BKR",
        "BALL",
        "BAC",
        "BBWI",
        "BAX",
        "BDX",
        "WRB",
        "BRK.B",
        "BBY",
        "BIO",
        "TECH",
        "BIIB",
        "BLK",
        "BX",
        "BK",
        "BA",
        "BKNG",
        "BWA",
        "BXP",
        "BSX",
        "BMY",
        "AVGO",
        "BR",
        "BRO",
        "BF.B",
        "BG",
        "CHRW",
        "CDNS",
        "CZR",
        "CPT",
        "CPB",
        "COF",
        "CAH",
        "KMX",
        "CCL",
        "CARR",
        "CTLT",
        "CAT",
        "CBOE",
        "CBRE",
        "CDW",
        "CE",
        "COR",
        "CNC",
        "CNP",
        "CDAY",
        "CF",
        "CRL",
        "SCHW",
        "CHTR",
        "CVX",
        "CMG",
        "CB",
        "CHD",
        "CI",
        "CINF",
        "CTAS",
        "CSCO",
        "C",
        "CFG",
        "CLX",
        "CME",
        "CMS",
        "KO",
        "CTSH",
        "CL",
        "CMCSA",
        "CMA",
        "CAG",
        "COP",
        "ED",
        "STZ",
        "CEG",
        "COO",
        "CPRT",
        "GLW",
        "CTVA",
        "CSGP",
        "COST",
        "CTRA",
        "CCI",
        "CSX",
        "CMI",
        "CVS",
        "DHI",
        "DHR",
        "DRI",
        "DVA",
        "DE",
        "DAL",
        "XRAY",
        "DVN",
        "DXCM",
        "FANG",
        "DLR",
        "DFS",
        "DIS",
        "DG",
        "DLTR",
        "D",
        "DPZ",
        "DOV",
        "DOW",
        "DTE",
        "DUK",
        "DD",
        "EMN",
        "ETN",
        "EBAY",
        "ECL",
        "EIX",
        "EW",
        "EA",
        "ELV",
        "LLY",
        "EMR",
        "ENPH",
        "ETR",
        "EOG",
        "EPAM",
        "EQT",
        "EFX",
        "EQIX",
        "EQR",
        "ESS",
        "EL",
        "ETSY",
        "EG",
        "EVRG",
        "ES",
        "EXC",
        "EXPE",
        "EXPD",
        "EXR",
        "XOM",
        "FFIV",
        "FDS",
        "FICO",
        "FAST",
        "FRT",
        "FDX",
        "FITB",
        "FSLR",
        "FE",
        "FIS",
        "FI",
        "FLT",
        "FMC",
        "F",
        "FTNT",
        "FTV",
        "FOXA",
        "FOX",
        "BEN",
        "FCX",
        "GRMN",
        "IT",
        "GEHC",
        "GEN",
        "GNRC",
        "GD",
        "GE",
        "GIS",
        "GM",
        "KVUE",
        "KDP",
        "KEY",
        "KEYS",
        "KMB",
        "KIM",
        "KMI",
        "KLAC",
        "KHC",
        "KR",
        "LHX",
        "LH",
        "LRCX",
        "LW",
        "LVS",
        "LDOS",
        "LEN",
        "LIN",
        "LYV",
        "LKQ",
        "LMT",
        "L",
        "LOW",
        "LULU",
        "LYB",
        "MTB",
        "MRO",
        "MPC",
        "MKTX",
        "MAR",
        "MMC",
        "MLM",
        "MAS",
        "MA",
        "MTCH",
        "MKC",
        "MCD",
        "MCK",
        "MDT",
        "MRK",
        "META",
        "MET",
        "MTD",
        "MGM",
        "MCHP",
        "MU",
        "MSFT",
        "MAA",
        "MRNA",
        "MHK",
        "MOH",
        "TAP",
        "MDLZ",
        "MPWR",
        "MNST",
        "MCO",
        "MS",
        "MOS",
        "MSI",
        "MSCI",
        "NDAQ",
        "NTAP",
        "NFLX",
        "NEM",
        "NWSA",
        "NWS",
        "NEE",
        "NKE",
        "NI",
        "NDSN",
        "NSC",
        "NTRS",
        "NOC",
        "NCLH",
        "NRG",
        "NUE",
        "NVDA",
        "NVR",
        "NXPI",
        "ORLY",
        "OXY",
        "ODFL",
        "OMC",
        "ON",
        "OKE",
        "ORCL",
        "OTIS",
        "PCAR",
        "PKG",
        "PANW",
        "PARA",
        "PH",
        "PAYX",
        "PAYC",
        "PYPL",
        "PNR",
        "PEP",
        "PFE",
        "PCG",
        "PM",
        "PSX",
        "PNW",
        "PXD",
        "PNC",
        "POOL",
        "PPG",
        "PPL",
        "PFG",
        "PG",
        "PGR",
        "PLD",
        "PRU",
        "PEG",
        "PTC",
        "PSA",
        "PHM",
        "QRVO",
        "PWR",
        "QCOM",
        "DGX",
        "RL",
        "RJF",
        "RTX",
        "O",
        "REG",
        "REGN",
        "RF",
        "RSG",
        "RMD",
        "RVTY",
        "RHI",
        "ROK",
        "ROL",
        "ROP",
        "ROST",
        "RCL",
        "SPGI",
        "CRM",
        "SBAC",
        "SLB",
        "STX",
        "SEE",
        "SRE",
        "NOW",
        "SHW",
        "SPG",
        "SWKS",
        "SJM",
        "SNA",
        "SEDG",
        "SO",
        "LUV",
        "SWK",
        "SBUX",
        "STT",
        "STLD",
        "STE",
        "SYK",
        "SYF",
        "SNPS",
        "SYY",
        "TMUS",
        "TROW",
        "TTWO",
        "TPR",
        "TRGP",
        "TGT",
        "TEL",
        "TDY",
        "TFX",
        "TER",
        "TSLA",
        "TXN",
        "TXT",
        "TMO",
        "TJX",
        "TSCO",
        "TT",
        "TDG",
        "TRV",
        "TRMB",
        "TFC",
        "TYL",
        "TSN",
        "USB",
        "UDR",
        "ULTA",
        "UNP",
        "UAL",
        "UPS",
        "URI",
        "UNH",
        "UHS",
        "VLO",
        "VTR",
        "VLTO",
        "VRSN",
        "VRSK",
        "VZ",
        "VRTX",
        "VFC",
        "VTRS",
        "VICI",
        "V",
        "VMC",
        "WAB",
        "WBA",
        "WMT",
        "WBD",
        "WM",
        "WAT",
        "WEC",
        "WFC",
        "WELL",
        "WST",
        "WDC",
        "WRK",
        "WY",
        "WHR",
        "WMB",
        "WTW",
        "GWW",
        "WYNN",
        "XEL",
        "XYL",
        "YUM",
        "ZBRA",
        "ZBH",
        "ZION",
        "ZTS",
    ]

    from data_services.vendors.eodhd import EodhdVendor
    from datetime import datetime
    import time

    start = datetime(2000, 1, 1)
    end = datetime(2024, 1, 1)

    universe = Universe.build_custom_universe("fx_universe", ALL_ETF)

    start_bench = time.time()
    _, data = asyncio.run(get_data(EodhdVendor, universe, start, end, do_archive=False))
    # _, data = get_last_data(EodhdVendor, universe)
    end_bench = time.time() - start_bench
    print(f"Run took {end_bench} seconds!")
    print(data[0][0])
    print(data[0][-1])
